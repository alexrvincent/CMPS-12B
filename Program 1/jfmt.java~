// $Id: jfmt.java,v 1.2 2013-09-24 14:38:16-07 - - $
// NAME: ALEX VINCENT
// USER: AVINCENT
// EMAIL: AVINCENT@UCSC.EDU

import java.io.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import static java.lang.System.*;

class jfmt {
   // Static variables keeping the general status of the program.
   public static final String JAR_NAME = get_jarname();
   public static final int EXIT_SUCCESS = 0;
   public static final int EXIT_FAILURE = 1;
   public static int exit_status = EXIT_SUCCESS;

   // A basename is the final component of a pathname.
   // If a java program is run from a jar, the classpath is the
   // pathname of the jar.
   static String get_jarname() {
      String jarpath = getProperty ("java.class.path");
      int lastslash = jarpath.lastIndexOf ('/');
      if (lastslash < 0) return jarpath;
      return jarpath.substring (lastslash + 1);
   }


// Formats a single file.
   static void format (Scanner infile, int widthGiven) {
     List<String> paragraph = new LinkedList<String>();
      // Read each line from the opened file, one after the other.
      // Stop the loop at end of file.
      for (int linenr = 1; infile.hasNextLine(); ++linenr) {
         String line = infile.nextLine();
         
         // Create a LinkedList of Strings.
         List<String> words = new LinkedList<String>();

         // Split the line into words around white space and iterate
         // over the words.
         for (String word: line.split ("\\s+")) {

            // Skip an empty word if such is found.
            if (word.length() == 0) continue;
            // Append the word to the end of the linked list.
            words.add (word);
            paragraph.add(word);

         }

         // Use iterator syntax to print out all of the words.
        for (String word: words){
          //out.printf (" %s", word);
        }
         //out.printf ("%n");
         if(infile.hasNextLine() == false){
           print_paragraph(paragraph, widthGiven);
         }
      }
   }
   
   
//Prints the formatted paragraph with width restrictions
   static void print_paragraph(List<String> paragraph, int width){
     out.printf("%n");
     int charCount = 0;
     for(String word: paragraph){
       if (charCount == 0){
         out.printf("%s",word);
         charCount = word.length();
         out.print(charCount);
       } else{
           charCount = charCount + word.length()+1;
           if(charCount > width){
             out.printf("%n");
             out.printf("%s",word);
             charCount = word.length();
             out.print(charCount);
           }else{
             out.printf(" %s",word);
             out.print(charCount);
           }
         }
     }
     if(charCount > 0) out.printf("%n");
   }
 
   
// Main function scans arguments and opens/closes files.
   public static void main (String[] args) {
     int width = 65;
     if (args.length == 0) {
         // There are no filenames given on the command line.
         out.printf ("No files read");
         //format (new Scanner (in));
      }else {
         // Store the width parameter if it is present.
        if (args[0].matches ("-\\d+")){
         String widthStr = ("%d");
         width = Integer.parseInt(widthStr);
         try{
           width = Integer.parseInt(widthStr);
         } catch (NumberFormatException error) {
           out.printf("NumberFormatException: %s%n", error.getMessage());
         }
        }
        //Iterate over each filename given on the command line.
         for (int argix = 0; argix < args.length; ++argix) {
            String filename = args[argix];
            if (filename.equals ("-")) {
               // Treat a filename of "-" to mean System.in.
               out.printf ("FILE: -%n");
               out.printf("We got the width message -%n");
               //format (new Scanner (in));
            }else {
               // Open the file and read it, or error out.
               try {
                  Scanner infile = new Scanner (new File (filename));
                  out.printf ("FILE: %s%n", filename);
                  format (infile,width);
                  infile.close();
               }catch (IOException error) {
                  exit_status = EXIT_FAILURE;
                  err.printf ("%s: %s%n", JAR_NAME,
                              error.getMessage());
               }
            }
         }
      }
      exit (exit_status);
   }
}
 
